# coding: utf-8

"""
    Regula Document Reader Web API

    Regula Document Reader Web API  # noqa: E501

    The version of the OpenAPI document: 5.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from regula.documentreader.webclient.configuration import Configuration


class GraphicFieldType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    PORTRAIT = "201"
    FINGERPRINT = "202"
    EYE = "203"
    SIGNATURE = "204"
    BAR_CODE = "205"
    PROOF_OF_CITIZENSHIP = "206"
    DOCUMENT_FRONT = "207"
    DOCUMENT_REAR = "208"
    COLOR_DYNAMIC = "209"
    GHOST_PORTRAIT = "210"
    STAMP = "211"
    OTHER = "250"
    FINGER_LEFT_THUMB = "300"
    FINGER_LEFT_INDEX = "301"
    FINGER_LEFT_MIDDLE = "302"
    FINGER_LEFT_RING = "303"
    FINGER_LEFT_LITTLE = "304"
    FINGER_RIGHT_THUMB = "305"
    FINGER_RIGHT_INDEX = "306"
    FINGER_RIGHT_MIDDLE = "307"
    FINGER_RIGHT_RING = "308"
    FINGER_RIGHT_LITTLE = "309"

    allowable_values = [PORTRAIT, FINGERPRINT, EYE, SIGNATURE, BAR_CODE, PROOF_OF_CITIZENSHIP, DOCUMENT_FRONT, DOCUMENT_REAR, COLOR_DYNAMIC, GHOST_PORTRAIT, STAMP, OTHER, FINGER_LEFT_THUMB, FINGER_LEFT_INDEX, FINGER_LEFT_MIDDLE, FINGER_LEFT_RING, FINGER_LEFT_LITTLE, FINGER_RIGHT_THUMB, FINGER_RIGHT_INDEX, FINGER_RIGHT_MIDDLE, FINGER_RIGHT_RING, FINGER_RIGHT_LITTLE]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, local_vars_configuration=None):  # noqa: E501
        """GraphicFieldType - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GraphicFieldType):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GraphicFieldType):
            return True

        return self.to_dict() != other.to_dict()
