# coding: utf-8

"""
    Regula Document Reader Web API

    Regula Document Reader Web API  # noqa: E501

    The version of the OpenAPI document: 5.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from regula.documentreader.webclient.configuration import Configuration


class LCID(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    LATIN = "0"
    AFRIKAANS = "1078"
    ALBANIAN = "1052"
    ARABIC_ALGERIA = "5121"
    ARABIC_BAHRAIN = "15361"
    ARABIC_EGYPT = "3073"
    ARABIC_IRAQ = "2049"
    ARABIC_JORDAN = "11265"
    ARABIC_KUWAIT = "13313"
    ARABIC_LEBANON = "12289"
    ARABIC_LIBYA = "4097"
    ARABIC_MOROCCO = "6145"
    ARABIC_OMAN = "8193"
    ARABIC_QATAR = "16385"
    ARABIC_SAUDI_ARABIA = "1025"
    ARABIC_SYRIA = "10241"
    ARABIC_TUNISIA = "7169"
    ARABIC_UAE = "4337"
    ARABIC_YEMEN = "9217"
    ARABIC_ARMENIAN = "1067"
    AZERI_CYRILIC = "2092"
    AZERI_LATIN = "1068"
    BASQUE = "1069"
    BELARUSIAN = "1059"
    BULGARIAN = "1026"
    CATALAN = "1027"
    CHINESE_HONGKONG_SAR = "3076"
    CHINESE_MACAO_SAR = "5124"
    CHINESE = "2052"
    CHINESE_SINGAPORE = "4100"
    CHINESE_TAIWAN = "1028"
    CROATIAN = "1050"
    CZECH = "1029"
    DANISH = "1030"
    DIVEHI = "1125"
    DUTCH_BELGIUM = "2067"
    DUTCH_NETHERLANDS = "1043"
    ENGLISH_AUSTRALIA = "3081"
    ENGLISH_BELIZE = "10249"
    ENGLISH_CANADA = "4105"
    ENGLISH_CARRIBEAN = "9225"
    ENGLISH_IRELAND = "6153"
    ENGLISH_JAMAICA = "8201"
    ENGLISH_NEW_ZEALAND = "5129"
    ENGLISH_PHILIPPINES = "13321"
    ENGLISH_SOUTH_AFRICA = "7177"
    ENGLISH_TRINIDAD = "11273"
    ENGLISH_UK = "2057"
    ENGLISH_US = "1033"
    ENGLISH_ZIMBABWE = "12297"
    ESTONIAN = "1061"
    FAEROESE = "1080"
    FARSI = "1065"
    FINNISH = "1035"
    FRENCH_BELGIUM = "2060"
    FRENCH_CANADA = "3084"
    FRENCH_FRANCE = "1036"
    FRENCH_LUXEMBOURG = "5132"
    FRENCH_MONACO = "6156"
    FRENCH_SWITZERLAND = "4108"
    FYRO_MACEDONIAN = "1071"
    GALICIAN = "1110"
    GEORGIAN = "1079"
    GERMAN_AUSTRIA = "3079"
    GERMAN_GERMANY = "1031"
    GERMAN_LIECHTENSTEIN = "5127"
    GERMAN_LUXEMBOURG = "4103"
    GERMAN_SWITZERLAND = "2055"
    GREEK = "1032"
    GUJARATI = "1095"
    HEBREW = "1037"
    HINDI_INDIA = "1081"
    HUNGARIAN = "1038"
    ICELANDIC = "1039"
    INDONESIAN = "1057"
    ITALIAN_ITALY = "1040"
    ITALIAN_SWITZERLAND = "2064"
    JAPANESE = "1041"
    KANNADA = "1099"
    KAZAKH = "1087"
    KONKANI = "1111"
    KOREAN = "1042"
    KYRGYZ_CYRILICK = "1088"
    LATVIAN = "1062"
    LITHUANIAN = "1063"
    MALAY_MALAYSIA = "1086"
    MALAY_BRUNEI_DARUSSALAM = "2110"
    MARATHI = "1102"
    MONGOLIAN_CYRILIC = "1104"
    NORWEGIAN_BOKMAL = "1044"
    NORWEGIAN_NYORSK = "2068"
    POLISH = "1045"
    PORTUGUESE_BRAZIL = "1046"
    PORTUGUESE_PORTUGAL = "2070"
    PUNJABI = "1094"
    RHAETO_ROMANIC = "1047"
    ROMANIAN = "1048"
    RUSSIAN = "1049"
    SANSKRIT = "1103"
    SERBIAN_CYRILIC = "3098"
    SERBIAN_LATIN = "2074"
    SLOVAK = "1051"
    SLOVENIAN = "1060"
    SPANISH_ARGENTINA = "11274"
    SPANISH_BOLIVIA = "16394"
    SPANISH_CHILE = "13322"
    SPANICH_COLOMBIA = "9226"
    SPANISH_COSTA_RICA = "5130"
    SPANISH_DOMINICAN_REPUBLIC = "7178"
    SPANISH_ECUADOR = "12298"
    SPANISH_EL_SALVADOR = "17418"
    SPANISH_GUATEMALA = "4106"
    SPANISH_HONDURAS = "18442"
    SPANISH_MEXICO = "2058"
    SPANISH_NICARAGUA = "19466"
    SPANISH_PANAMA = "6154"
    SPANISH_PARAGUAY = "15370"
    SPANISH_PERU = "10250"
    SPANISH_PUERTO_RICO = "20490"
    SPANISH_TRADITIONAL_SORT = "1034"
    SPANISH_INTERNATIONAL_SORT = "3082"
    SPANISH_URUGUAY = "14346"
    SPANISH_VENEZUELA = "8202"
    SWAHILI = "1089"
    SWEDISH = "1053"
    SWEDISH_FINLAND = "2077"
    SYRIAC = "1114"
    TAMIL = "1097"
    TATAR = "1092"
    TELUGU = "1098"
    THAI_THAILAND = "1054"
    TURKISH = "1055"
    TAJIK_CYRILLIC = "1064"
    TURKMEN = "1090"
    UKRAINIAN = "1058"
    URDU = "1056"
    UZBEK_CYRILIC = "2115"
    UZBEK_LATIN = "1091"
    VIETNAMESE = "1066"
    CTC_SIMPLIFIED = "50001"
    CTC_TRADITIONAL = "50002"

    allowable_values = [LATIN, AFRIKAANS, ALBANIAN, ARABIC_ALGERIA, ARABIC_BAHRAIN, ARABIC_EGYPT, ARABIC_IRAQ, ARABIC_JORDAN, ARABIC_KUWAIT, ARABIC_LEBANON, ARABIC_LIBYA, ARABIC_MOROCCO, ARABIC_OMAN, ARABIC_QATAR, ARABIC_SAUDI_ARABIA, ARABIC_SYRIA, ARABIC_TUNISIA, ARABIC_UAE, ARABIC_YEMEN, ARABIC_ARMENIAN, AZERI_CYRILIC, AZERI_LATIN, BASQUE, BELARUSIAN, BULGARIAN, CATALAN, CHINESE_HONGKONG_SAR, CHINESE_MACAO_SAR, CHINESE, CHINESE_SINGAPORE, CHINESE_TAIWAN, CROATIAN, CZECH, DANISH, DIVEHI, DUTCH_BELGIUM, DUTCH_NETHERLANDS, ENGLISH_AUSTRALIA, ENGLISH_BELIZE, ENGLISH_CANADA, ENGLISH_CARRIBEAN, ENGLISH_IRELAND, ENGLISH_JAMAICA, ENGLISH_NEW_ZEALAND, ENGLISH_PHILIPPINES, ENGLISH_SOUTH_AFRICA, ENGLISH_TRINIDAD, ENGLISH_UK, ENGLISH_US, ENGLISH_ZIMBABWE, ESTONIAN, FAEROESE, FARSI, FINNISH, FRENCH_BELGIUM, FRENCH_CANADA, FRENCH_FRANCE, FRENCH_LUXEMBOURG, FRENCH_MONACO, FRENCH_SWITZERLAND, FYRO_MACEDONIAN, GALICIAN, GEORGIAN, GERMAN_AUSTRIA, GERMAN_GERMANY, GERMAN_LIECHTENSTEIN, GERMAN_LUXEMBOURG, GERMAN_SWITZERLAND, GREEK, GUJARATI, HEBREW, HINDI_INDIA, HUNGARIAN, ICELANDIC, INDONESIAN, ITALIAN_ITALY, ITALIAN_SWITZERLAND, JAPANESE, KANNADA, KAZAKH, KONKANI, KOREAN, KYRGYZ_CYRILICK, LATVIAN, LITHUANIAN, MALAY_MALAYSIA, MALAY_BRUNEI_DARUSSALAM, MARATHI, MONGOLIAN_CYRILIC, NORWEGIAN_BOKMAL, NORWEGIAN_NYORSK, POLISH, PORTUGUESE_BRAZIL, PORTUGUESE_PORTUGAL, PUNJABI, RHAETO_ROMANIC, ROMANIAN, RUSSIAN, SANSKRIT, SERBIAN_CYRILIC, SERBIAN_LATIN, SLOVAK, SLOVENIAN, SPANISH_ARGENTINA, SPANISH_BOLIVIA, SPANISH_CHILE, SPANICH_COLOMBIA, SPANISH_COSTA_RICA, SPANISH_DOMINICAN_REPUBLIC, SPANISH_ECUADOR, SPANISH_EL_SALVADOR, SPANISH_GUATEMALA, SPANISH_HONDURAS, SPANISH_MEXICO, SPANISH_NICARAGUA, SPANISH_PANAMA, SPANISH_PARAGUAY, SPANISH_PERU, SPANISH_PUERTO_RICO, SPANISH_TRADITIONAL_SORT, SPANISH_INTERNATIONAL_SORT, SPANISH_URUGUAY, SPANISH_VENEZUELA, SWAHILI, SWEDISH, SWEDISH_FINLAND, SYRIAC, TAMIL, TATAR, TELUGU, THAI_THAILAND, TURKISH, TAJIK_CYRILLIC, TURKMEN, UKRAINIAN, URDU, UZBEK_CYRILIC, UZBEK_LATIN, VIETNAMESE, CTC_SIMPLIFIED, CTC_TRADITIONAL]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, local_vars_configuration=None):  # noqa: E501
        """LCID - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LCID):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LCID):
            return True

        return self.to_dict() != other.to_dict()
